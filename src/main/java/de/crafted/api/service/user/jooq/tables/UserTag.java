/*
 * This file is generated by jOOQ.
 */
package de.crafted.api.service.user.jooq.tables;


import de.crafted.api.service.user.jooq.DefaultSchema;
import de.crafted.api.service.user.jooq.Keys;
import de.crafted.api.service.user.jooq.tables.records.UserTagRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTag extends TableImpl<UserTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_tag</code>
     */
    public static final UserTag USER_TAG = new UserTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTagRecord> getRecordType() {
        return UserTagRecord.class;
    }

    /**
     * The column <code>user_tag.user_id</code>.
     */
    public final TableField<UserTagRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @Deprecated
    public final TableField<UserTagRecord, Object> TAG = createField(DSL.name("tag"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"public\".\"tag\"").nullable(false), this, "");

    private UserTag(Name alias, Table<UserTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserTag(Name alias, Table<UserTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>user_tag</code> table reference
     */
    public UserTag(String alias) {
        this(DSL.name(alias), USER_TAG);
    }

    /**
     * Create an aliased <code>user_tag</code> table reference
     */
    public UserTag(Name alias) {
        this(alias, USER_TAG);
    }

    /**
     * Create a <code>user_tag</code> table reference
     */
    public UserTag() {
        this(DSL.name("user_tag"), null);
    }

    public <O extends Record> UserTag(Table<O> child, ForeignKey<O, UserTagRecord> key) {
        super(child, key, USER_TAG);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UserTagRecord> getPrimaryKey() {
        return Keys.USER_TAG_PKEY;
    }

    @Override
    public List<UniqueKey<UserTagRecord>> getKeys() {
        return Arrays.<UniqueKey<UserTagRecord>>asList(Keys.USER_TAG_PKEY);
    }

    @Override
    public List<ForeignKey<UserTagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserTagRecord, ?>>asList(Keys.USER_TAG__USER_TAG_USER_ID_FKEY);
    }

    private transient User _user;

    public User user() {
        if (_user == null)
            _user = new User(this, Keys.USER_TAG__USER_TAG_USER_ID_FKEY);

        return _user;
    }

    @Override
    public UserTag as(String alias) {
        return new UserTag(DSL.name(alias), this);
    }

    @Override
    public UserTag as(Name alias) {
        return new UserTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTag rename(String name) {
        return new UserTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserTag rename(Name name) {
        return new UserTag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Object> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
